#!/bin/sh

# installer.SlackBuild
# Build a Raspberry Pi installer image
#
# Copyright 2012 David Spencer, Baildon, West Yorkshire, U.K.
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#------------------------------------------------------------------------------
# To run this script you will need:
#   * initrd-versatile.img in this directory, possibly as a symlink to your
#     armedslack-current tree (it's in armedslack-current/isolinux)
#   * kernel, modules, boot and hacks packages already built in $OUTPUT
#------------------------------------------------------------------------------

TMP=${TMP:-/tmp}
OUTPUT=${OUTPUT:-/tmp}

MYTMP=$TMP/installer
IMAGE=raspi-slack-installer_$(date '+%d%b%y').img

CWD=$(pwd)

rm -rf $MYTMP
mkdir -p $MYTMP

set -e

#------------------------------------------------------------------------------
# Extract the installer tree from the upstream 'versatile' initrd
#------------------------------------------------------------------------------

rm -rf $MYTMP/initrd-tree
mkdir -p $MYTMP/initrd-tree
cd $MYTMP/initrd-tree
zcat $CWD/initrd-versatile.img | cpio -iv

#------------------------------------------------------------------------------
# Add raspi specific README and extra packages to the installer tree
#------------------------------------------------------------------------------

cat $CWD/README.installer > $MYTMP/initrd-tree/README

mkdir -p $MYTMP/initrd-tree/raspi-extra
for pkgbase in \
  raspi-boot \
  raspi-hacks \
  kernel_raspi \
  kernel-modules-raspi
do
  # If there are multiple packages in $OUTPUT, use the most recent one
  pkg=$(ls -t $OUTPUT/$pkgbase-*.t?z | head -1)
  cp -a -v \
    $pkg \
    $MYTMP/initrd-tree/raspi-extra/
done

#------------------------------------------------------------------------------
# Add kernel modules to the installer tree
#------------------------------------------------------------------------------

# Remove the versatile modules
# (it might be helpful to qemu users to keep them, but they're just too big)
cd $MYTMP/initrd-tree/
rm -rf lib/modules/

# Add the modules from the kernel-modules-raspi package
tar xvf $MYTMP/initrd-tree/raspi-extra/kernel-modules-raspi-*.t?z lib/modules/

#------------------------------------------------------------------------------
# Roll the initrd.  Name it 'install.gz' so it's recognisable and
# can be removed after installation.
#------------------------------------------------------------------------------

cd $MYTMP/initrd-tree
find . | cpio -o -v -H newc | gzip -9c > $MYTMP/install.gz

#------------------------------------------------------------------------------
# Make an empty SD card image and format it
#------------------------------------------------------------------------------

rm -f $MYTMP/$IMAGE
echo "Making $MYTMP/$IMAGE"

# Let's work in 512B sectors.
# 128 "heads" and 32 "sectors" => 2MiB "cylinders",
# That's 4096 sectors per "cylinder".
# 4 "cylinders" = 8MiB erase block boundary (or 2*4MiB boundaries).
# So keep partition boundaries at 4-cyl multiples for best results.
# That's 16384 sectors per erase block.
# 944 "cylinders" = 1979711488B, which is < 2MB, so fits on a "2Mb" card.
dd if=/dev/zero of=$MYTMP/$IMAGE bs=512 count=$(( 128 * 32 * 944 ))

# Drop in the prepared MBR.
# Partition 1 start       1 end  180223 type 0c
# Partition 2 start  180224 end 1032191 type 82
# Partition 3 start 1032192 end 3866623 type 83
dd if=$CWD/mbr of=$MYTMP/$IMAGE bs=512 count=1 conv=notrunc

# Set up devices /dev/md/raspimg{1,2,3} to access partitions on the card image
LOOPDEV=$(losetup -f --show $MYTMP/$IMAGE)
mdadm --build --force raspimg --level linear --raid-devices 1 $LOOPDEV
# It takes a few secs to ready /dev/md/* apparently
sleep 5

mkdosfs -I /dev/md/raspimg1
mkswap /dev/md/raspimg2
mkfs -t ext4 -O ^has_journal -E stride=2,stripe-width=1024 -b 4096 /dev/md/raspimg3

# Save the empty SD card image as a useful by-product.
# (Very time consuming, so only do this if needed.)
EMPTY=raspi-empty-sdcard.img
if [ ! -f $OUTPUT/$EMPTY.xz ]; then
  echo "Compressing image to $OUTPUT/$EMPTY.xz"
  xz -v < $MYTMP/$IMAGE > $OUTPUT/$EMPTY.xz
  sha1sum $OUTPUT/$EMPTY.xz > $OUTPUT/$EMPTY.xz.sha1
fi

#------------------------------------------------------------------------------
# Put required boot files onto image partition 1
#------------------------------------------------------------------------------

# Extract the boot stuff from packages in installer's raspi-extra/
cd $MYTMP
tar xvf $MYTMP/initrd-tree/raspi-extra/raspi-boot-*.t?z   boot/
tar xvf $MYTMP/initrd-tree/raspi-extra/kernel_raspi-*.t?z boot/

# Mount the card image's boot partition
mkdir -p $MYTMP/mnt
mount -t vfat /dev/md/raspimg1 $MYTMP/mnt

# Copy the required boot files
cp -v \
  boot/bootcode.bin \
  boot/loader.bin \
  boot/LICENCE.broadcom \
  boot/kernel.img \
  $MYTMP/mnt
cp -v \
  boot/arm240_start.elf \
  $MYTMP/mnt/start.elf
cat boot/config.txt.new \
  > $MYTMP/mnt/config.txt
cat boot/cmdline.txt.new | sed 's:root=@ROOTDEV@:root=/dev/mmcblk0p3:' \
  > $MYTMP/mnt/cmdline.txt

# Copy the install.gz that we prepared earlier
cp -v \
  $MYTMP/install.gz \
  $MYTMP/mnt/

# Add initrd parameters for install.gz to config.txt and cmdline.txt
LOADADDR="0xa00000"
SIZE="0x$(printf '%x' $(stat --format='%s' $MYTMP/mnt/install.gz))"
echo "ramfsfile=install.gz" >> $MYTMP/mnt/config.txt
echo "ramfsaddr=$LOADADDR"  >> $MYTMP/mnt/config.txt
sed -i -e "s/\$/ initrd=$LOADADDR,$SIZE/" $MYTMP/mnt/cmdline.txt

# Compose the README
cat $CWD/README.installer                   > $MYTMP/mnt/README
echo ""                                    >> $MYTMP/mnt/README
echo ""                                    >> $MYTMP/mnt/README
cat $MYTMP/initrd-tree/.installer-version  >> $MYTMP/mnt/README
echo "Raspberry Pi:"                       >> $MYTMP/mnt/README
echo "-------------"                       >> $MYTMP/mnt/README
KREV="$(cd $CWD/../kernel_raspi/linux; git log --format='%h' -n 1)"
echo "Kernel git rev.......: $KREV"        >> $MYTMP/mnt/README
BREV="$(cd $CWD/../raspi-boot/firmware; git log --format='%h' -n 1)"
echo "Boot fw git rev......: $BREV"        >> $MYTMP/mnt/README
echo "Build host...........: $(uname -a)"  >> $MYTMP/mnt/README
echo "Build date...........: $(date)"      >> $MYTMP/mnt/README

# Unmount the boot partition and tear down the devices
umount -v $MYTMP/mnt
mdadm --stop /dev/md/raspimg
losetup -d $LOOPDEV

#------------------------------------------------------------------------------
# Compress the card image and do a checksum
#------------------------------------------------------------------------------

echo  "Compressing image to $OUTPUT/$IMAGE.xz"
xz -v  < $MYTMP/$IMAGE    > $OUTPUT/$IMAGE.xz
sha1sum $OUTPUT/$IMAGE.xz > $OUTPUT/$IMAGE.xz.sha1

rm $MYTMP/$IMAGE

#------------------------------------------------------------------------------

exit 0
